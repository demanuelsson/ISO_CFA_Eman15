function [Time,H2Oc_ppm,O18_del,O17_del,D_del,GasP_torr,GasT_C,AmbT_C] = ImportLGRall(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [TIME,H2O16C_PPM,H2O16C_PPM_SE,H2O18C_PPM,H2O18C_PPM_SE,HODC_PPM,HODC_PPM_SE,H2OC_PPM,H2OC_PPM_SE,O18_DEL,O18_DEL_SE,D_DEL,D_DEL_SE,GASP_TORR,GASP_TORR_SE,GAST_C,GAST_C_SE,AMBT_C]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [TIME,H2O16C_PPM,H2O16C_PPM_SE,H2O18C_PPM,H2O18C_PPM_SE,HODC_PPM,HODC_PPM_SE,H2OC_PPM,H2OC_PPM_SE,O18_DEL,O18_DEL_SE,D_DEL,D_DEL_SE,GASP_TORR,GASP_TORR_SE,GAST_C,GAST_C_SE,AMBT_C]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Time,H2O16c_ppm,H2O16c_ppm_se,H2O18c_ppm,H2O18c_ppm_se,HODc_ppm,HODc_ppm_se,H2Oc_ppm,H2Oc_ppm_se,O18_del,O18_del_se,D_del,D_del_se,GasP_torr,GasP_torr_se,GasT_C,GasT_C_se,AmbT_C]
%   = importfile('wvia_10Jun2013_f0001.txt',1, 87808);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2013/06/21 06:04:09
% Amended by TROY BAISDEN 2013/06/21
% Amended by Liz Keller 2013/06/27: default endRow is too small for many
% Amended by Liz Keller 2014/17/06: column order changed, added O17_del output
% files

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 3; %START ON LINE 3 !!
    %endRow = 87808;
    endRow = 200000; %previous value was too low to handle all files
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of column with dates to serial date numbers using
% date format string (datenum).
for row=1:length(dataArray{1})
    try
        numericData(row, 1) = datenum(dataArray{1}{row}, 'mm/dd/yy HH:MM:SS.FFF');
        raw{row, 1} = numericData(row, 1);
    catch me
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
Time = cell2mat(raw(:, 1));

H2Oc_ppm = cell2mat(raw(:, 2));
%H2Oc_ppm_se = cell2mat(raw(:, 3));
O18_del = cell2mat(raw(:, 4));
%O18_del_se = cell2mat(raw(:, 5));
D_del = cell2mat(raw(:, 6));
%D_del_se = cell2mat(raw(:, 7));
O17_del = cell2mat(raw(:, 8));
%O17_del_se = cell2mat(raw(:, 9));
GasP_torr = cell2mat(raw(:, 16));
%GasP_torr_se = cell2mat(raw(:, 17));
GasT_C = cell2mat(raw(:, 18));
%GasT_C_se = cell2mat(raw(:, 19));


